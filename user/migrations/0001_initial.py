# Generated by Django 2.2.4 on 2019-12-06 12:20

from django.db import migrations, models
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('team', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('Email', models.EmailField(max_length=254, null=True, unique=True)),
                ('FirstName', models.CharField(max_length=140, null=True)),
                ('LastName', models.CharField(max_length=140, null=True)),
                ('UserProfile', models.TextField(help_text='Text : describe the user (optional)', null=True)),
                ('IsConsultant', models.BooleanField(default=False, help_text='If user can do reply to consulting offers')),
                ('ConsultantProfile', models.TextField(help_text='Text : describe the user if he is consultant (optional)', null=True)),
                ('APIKey', models.CharField(help_text='This is the Key for using the API _ when user is created the APIKey is generated by uuid.uuid4().hex', max_length=140, null=True)),
                ('IsSuperAdmin', models.BooleanField(default=False, help_text='Only for some users inside IXIOO, give all access to restricted features for IXIOO')),
                ('AccessPending', models.BooleanField(default=False, help_text="When a user is invited , he is 'pending' until he confirm email and accept the invitation  (this is not sure, to see how it work with django systems)")),
                ('AccessRevoked', models.BooleanField(default=False, help_text='When a user is removed , he is AccessRevoked=1 instead to delete the user entry (this is not sure, to see how it work with django systems)')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Teams', models.ManyToManyField(help_text='Link ManyToMany with intermediary TABLE to table TEAM', related_name='Users', to='team.Team')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['Email'], name='User_Email_a05143_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['APIKey'], name='User_APIKey_cb4f22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['IsSuperAdmin'], name='User_IsSuper_154d4d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['AccessPending'], name='User_AccessP_96d333_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['AccessRevoked'], name='User_AccessR_ae720f_idx'),
        ),
    ]
