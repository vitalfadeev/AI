# Generated by Django 2.2.4 on 2019-11-14 10:48

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('team', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_type', models.CharField(choices=[('IGN', 'Ignore'), ('IN', 'Input'), ('OUT', 'Output')], max_length=3, verbose_name='column type')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_for_learning', models.NullBooleanField(verbose_name='Is For Learning')),
                ('is_for_solving', models.NullBooleanField(verbose_name='Is For Solving')),
                ('is_with_missing_values', models.NullBooleanField(verbose_name='Is With Missing Values')),
                ('is_for_evaluation', models.NullBooleanField(verbose_name='Is For Evaluation')),
                ('is_learned', models.NullBooleanField(verbose_name='Is Learned')),
                ('is_solved', models.NullBooleanField(verbose_name='Is Solved')),
            ],
            options={
                'verbose_name': 'Column',
                'verbose_name_plural': 'Columns',
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetimecreation', models.DateTimeField(blank=True, db_column='DateTimeCreation', default=datetime.datetime.now)),
                ('datausage', models.TextField(blank=True, db_column='Project_DataUsage', verbose_name='DataUsage')),
                ('name', models.CharField(db_column='Project_Name', max_length=200, verbose_name='Name')),
                ('desc', models.TextField(db_column='Project_Description', verbose_name='Description')),
                ('is_public', models.NullBooleanField(db_column='Project_IsPublic')),
                ('datasource_is_public', models.NullBooleanField(db_column='Project_DataSourceIsPublic')),
                ('datasource_sample_only_public', models.NullBooleanField(db_column='Project_DataSourceSampleOnlyPublic')),
                ('datasource_is_private', models.NullBooleanField(db_column='Project_DataSourceIsPrivate')),
                ('brain_is_duplicatable', models.NullBooleanField(db_column='Project_BrainIsDuplicatable')),
                ('brain_copy_costUSD', models.FloatField(blank=True, db_column='Project_BrainCopyCostUSD', null=True)),
                ('brain_is_exportable', models.NullBooleanField(db_column='Project_BrainIsExportable')),
                ('brain_export_costUSD', models.FloatField(blank=True, db_column='Project_BrainExportCostUSD', null=True)),
                ('api_resolving_is_public', models.NullBooleanField(db_column='Project_APISolving_IsPublic', default=False)),
                ('api_resolving_priceUSD', models.FloatField(blank=True, db_column='Project_APISolving_PriceUSD', null=True)),
                ('column_description', django_mysql.models.JSONField(db_column='Project_ColumnsDescription', default=dict)),
                ('analysissource_columnnameinput', django_mysql.models.JSONField(db_column='AnalysisSource_ColumnsNameInput', default=dict)),
                ('analysissource_columnnameoutput', django_mysql.models.JSONField(db_column='AnalysisSource_ColumnsNameOutput', default=dict)),
                ('analysissource_columnnameignore', django_mysql.models.JSONField(db_column='AnalysisSource_ColumnsNameIgnore', default=dict)),
                ('analysissource_columntype', django_mysql.models.JSONField(db_column='AnalysisSource_ColumnType', default=dict)),
                ('analysissource_errors', django_mysql.models.JSONField(db_column='AnalysisSource_Errors', default=dict)),
                ('analysissource_warnings', django_mysql.models.JSONField(db_column='AnalysisSource_Warnings', default=dict)),
                ('data_columnsInputFilterLines', django_mysql.models.JSONField(db_column='Data_ColumnsInputFilterLines', default=dict)),
                ('input_file', models.FileField(upload_to='machine/%Y-%m-%d/%H-%M', verbose_name='file')),
                ('parameterCNN_ShapeAuto', models.BooleanField(default=True)),
                ('parameterCNN_Loss', models.CharField(blank=True, choices=[('BinaryCrossentropy', 'Binary Crossentropy'), ('SquaredHinge', 'Squared Hinge'), ('Poisson', 'Poisson'), ('MeanSquaredError', 'Mean Squared Error'), ('MeanAbsoluteError', 'Mean Absolute Error'), ('Huber', 'Huber'), ('Hinge', 'Hinge'), ('CosineSimilarity', 'Cosine Similarity')], default='BinaryCrossentropy', max_length=50, null=True, verbose_name='Loss')),
                ('parameterCNN_Optimizer', models.CharField(blank=True, choices=[('SGD', 'SGD'), ('RMSprop', 'RMSprop'), ('Adadelta', 'Adadelta'), ('Adam', 'Adam'), ('Adamax', 'Adamax'), ('Nadam', 'Nadam')], default='SGD', max_length=50, null=True, verbose_name='Optimizer')),
                ('parameterCNN_Shape', models.CharField(blank=True, choices=[('softmax', 'softmax'), ('elu', 'elu'), ('selu', 'selu'), ('softplus', 'softplus'), ('softsign', 'softsign'), ('relu', 'relu'), ('tanh', 'tanh'), ('hard_sigmoid', 'hard_sigmoid'), ('exponential', 'exponential'), ('linear', 'linear'), ('dropout', 'dropout'), ('batchnormalization', 'batchnormalization')], default='softmax', max_length=50, null=True, verbose_name='Shape')),
                ('parameterCNN_BatchEpochAuto', models.BooleanField(default=True, verbose_name='Batch Epoch Auto')),
                ('parameterCNN_BatchSize', models.PositiveIntegerField(blank=True, default=1, null=True, verbose_name='Batch Size')),
                ('parameterCNN_Epoch', models.PositiveIntegerField(blank=True, default=1, null=True, verbose_name='Epoch')),
                ('solving_accuracy', django_mysql.models.JSONField(db_column='Solving_Acuracy', default=dict)),
                ('solving_loss', django_mysql.models.JSONField(db_column='Solving_Loss', default=dict)),
                ('solving_brain_model', django_mysql.models.JSONField(db_column='Solving_BrainModel', default=dict)),
                ('solving_datetime_brain_model', models.DateTimeField(blank=True, db_column='Solving_DateTimeBrainModel', default=datetime.datetime.now)),
                ('solving_path_log_tensorboard', models.TextField(blank=True, db_column='Solving_PathLogTensorBoard', null=True)),
                ('solving_training_epoch_count', models.PositiveIntegerField(blank=True, db_column='Solving_TrainingEpochCount', null=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Received DateTime')),
                ('analysis_source_columns', models.ManyToManyField(to='machine.Column', verbose_name='Analysis Source Columns')),
                ('brain_id_original', models.ForeignKey(blank=True, db_column='Brain_ID_Original', default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='machine.Machine')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, db_column='Group_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='team.Team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'Machine',
                'verbose_name_plural': 'Machines',
                'db_table': 'brains',
            },
        ),
        migrations.CreateModel(
            name='MachineMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message')),
                ('message_file', models.FileField(blank=True, null=True, upload_to='machinemessage/%Y-%m-%d/%H-%M', verbose_name='file')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='machine.Machine', verbose_name='machine')),
            ],
            options={
                'verbose_name': 'Machine Message',
                'verbose_name_plural': 'Machine Message',
            },
        ),
    ]
